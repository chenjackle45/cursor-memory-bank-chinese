# VAN 模式：QA 技術驗證（進入 BUILD 前）

> **重點摘要：** 本地圖詳述於 CREATIVE 模式結束、BUILD 模式開始前，由 `VAN QA` 指令觸發的技術驗證流程。確保相依套件、設定、環境與基本建構功能皆正常。

## 🚀 VAN QA 模式啟動

完成 CREATIVE 模式後，當使用者輸入 "VAN QA" 時，請回應：

```
使用者：VAN QA

回應：OK VAN QA - 開始技術驗證
正在載入 QA 驗證地圖...
```

## 🔄 QA 指令優先權（QA 覆蓋）

QA 驗證可於任意時機（`QA` 指令）呼叫，並立即取得最高優先權：

```mermaid
graph TD
    UserQA["使用者輸入：QA"] --> HighPriority["⚠️ 高優先權指令"]
    HighPriority --> CurrentTask["暫停目前任務/流程"]
    CurrentTask --> LoadQA["載入 QA 驗證地圖（本檔案）"]
    LoadQA --> RunQA["執行 QA 驗證流程"]
    RunQA --> QAResults{"QA 結果"}
    
    QAResults -->|"通過"| ResumeFlow["恢復先前流程"]
    QAResults -->|"失敗"| FixIssues["修正發現問題"]
    FixIssues --> ReRunQA["重新執行 QA 驗證"]
    ReRunQA --> QAResults
    
    style UserQA fill:#f8d486,stroke:#e8b84d,color:black
    style HighPriority fill:#ff0000,stroke:#cc0000,color:white,stroke-width:3px
    style LoadQA fill:#4da6ff,stroke:#0066cc,color:white
    style RunQA fill:#4da6ff,stroke:#0066cc,color:white
    style QAResults fill:#f6546a,stroke:#c30052,color:white
```

### QA 中斷規則

1. **立即優先權：** `QA` 指令會中斷一切流程。
2. **載入與執行：** 載入本地圖（`van-qa-validation.mdc`）並執行完整流程。
3. **修正優先：** 修正步驟優先於所有待處理模式切換。
4. **恢復：** 通過時恢復原流程。

```
⚠️ QA 覆蓋已啟動
所有其他流程已暫停
正在執行 QA 驗證檢查...
發現任何問題必須先修正，才能繼續正常流程
```

## 🔍 技術驗證總覽

四點驗證流程：

```mermaid
graph TD
    VANQA["VAN QA 模式"] --> FourChecks["四點驗證"]
    
    FourChecks --> DepCheck["1️⃣ 相依套件驗證"]
    DepCheck --> ConfigCheck["2️⃣ 設定檔驗證"]
    ConfigCheck --> EnvCheck["3️⃣ 環境驗證"]
    EnvCheck --> MinBuildCheck["4️⃣ 最小建構測試"]
    
    MinBuildCheck --> ValidationResults{"所有檢查<br>通過？"}
    ValidationResults -->|"是"| SuccessReport["產生成功報告"]
    ValidationResults -->|"否"| FailureReport["產生失敗報告"]
    
    SuccessReport --> BUILD_Transition["觸發 BUILD 模式"]
    FailureReport --> FixIssues["修正技術問題"]
    FixIssues --> ReValidate["重新驗證（重新執行 VAN QA）"]
    ReValidate --> FourChecks
    
    style VANQA fill:#4da6ff,stroke:#0066cc,color:white
    style FourChecks fill:#f6546a,stroke:#c30052,color:white
    style ValidationResults fill:#f6546a,stroke:#c30052,color:white
    style BUILD_Transition fill:#10b981,stroke:#059669,color:white
    style FixIssues fill:#ff5555,stroke:#dd3333,color:white
```

## 🔄 與設計決策整合

讀取創意階段產出（如 `memory-bank/systemPatterns.md`）以進行驗證：

```mermaid
graph TD
    Start["讀取設計決策"] --> ReadCreative["解析創意階段<br>文件"]
    ReadCreative --> ExtractTech["提取技術<br>選擇"]
    ExtractTech --> ExtractDeps["提取所需<br>相依套件"]
    ExtractDeps --> BuildValidationPlan["建立驗證<br>計畫"]
    BuildValidationPlan --> StartValidation["開始四點<br>驗證流程"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style ExtractTech fill:#f6546a,stroke:#c30052,color:white
    style BuildValidationPlan fill:#10b981,stroke:#059669,color:white
    style StartValidation fill:#f6546a,stroke:#c30052,color:white
```

### 技術提取範例（PowerShell）：
```powershell
# 範例：從創意階段文件中提取技術選擇
function Extract-TechnologyChoices {
    $techChoices = @{}
    # 從 systemPatterns.md 讀取
    if (Test-Path "memory-bank\systemPatterns.md") {
        $content = Get-Content "memory-bank\systemPatterns.md" -Raw
        if ($content -match "Framework:\s*(\w+)") { $techChoices["framework"] = $Matches[1] }
        if ($content -match "UI Library:\s*(\w+)") { $techChoices["ui_library"] = $Matches[1] }
        if ($content -match "State Management:\s*([^\n]+)") { $techChoices["state_management"] = $Matches[1].Trim() }
    }
    return $techChoices
}
```

## 🔍 詳細 QA 驗證步驟與腳本

### 1️⃣ 相依套件驗證

```mermaid
# 相依套件驗證流程圖
graph TD
    Start["相依套件驗證"] --> ReadDeps["讀取創意階段所需相依套件"]
    ReadDeps --> CheckInstalled["檢查相依套件是否已安裝"]
    CheckInstalled --> DepStatus{"所有相依套件<br>已安裝？"}
    DepStatus -->|"是"| VerifyVersions["驗證版本與相容性"]
    DepStatus -->|"否"| InstallMissing["安裝缺少的相依套件"]
    InstallMissing --> VerifyVersions
    VerifyVersions --> VersionStatus{"版本<br>相容？"}
    VersionStatus -->|"是"| DepSuccess["相依套件驗證<br>✅ 通過"]
    VersionStatus -->|"否"| UpgradeVersions["升級/降級至相容版本"]
    UpgradeVersions --> RetryVerify["重新驗證"]
    RetryVerify --> VersionStatus
    style Start fill:#4da6ff; style DepSuccess fill:#10b981; style DepStatus fill:#f6546a; style VersionStatus fill:#f6546a;
```

#### 實作範例（PowerShell）：
```powershell
# Verify-Dependencies 函數範例
function Verify-Dependencies {
    $requiredDeps = @{ "node" = ">=14.0.0"; "npm" = ">=6.0.0" }
    $missingDeps = @(); $incompatibleDeps = @()
    try { $nodeVersion = node -v; if ($nodeVersion -match "v(\d+).*") { if ([int]$Matches[1] -lt 14) { $incompatibleDeps += "node" } } } catch { $missingDeps += "node" }
    try { $npmVersion = npm -v; if ($npmVersion -match "(\d+).*") { if ([int]$Matches[1] -lt 6) { $incompatibleDeps += "npm" } } } catch { $missingDeps += "npm" }
    if ($missingDeps.Count -eq 0 -and $incompatibleDeps.Count -eq 0) { Write-Output "✅ Deps OK"; return $true } else { Write-Output "❌ Deps FAIL"; return $false }
}
```

#### 實作範例（Bash）：
```bash
# verify_dependencies 函數範例
verify_dependencies() {
    local missing_deps=(); local incompatible_deps=()
    if command -v node &> /dev/null; then node_version=$(node -v); if [[ $node_version =~ v([0-9]+) ]]; then if (( ${BASH_REMATCH[1]} < 14 )); then incompatible_deps+=("node"); fi; fi; else missing_deps+=("node"); fi
    if command -v npm &> /dev/null; then npm_version=$(npm -v); if [[ $npm_version =~ ([0-9]+) ]]; then if (( ${BASH_REMATCH[1]} < 6 )); then incompatible_deps+=("npm"); fi; fi; else missing_deps+=("npm"); fi
    if [ ${#missing_deps[@]} -eq 0 ] && [ ${#incompatible_deps[@]} -eq 0 ]; then echo "✅ Deps OK"; return 0; else echo "❌ Deps FAIL"; return 1; fi
}
```

### 2️⃣ 設定檔驗證

```mermaid
# 設定檔驗證流程圖
graph TD
    Start["設定檔驗證"] --> IdentifyConfigs["識別檔案"]
    IdentifyConfigs --> ReadConfigs["讀取檔案"]
    ReadConfigs --> ValidateSyntax["驗證語法"]
    ValidateSyntax --> SyntaxStatus{"有效？"}
    SyntaxStatus -->|"是"| CheckCompatibility["檢查相容性"]
    SyntaxStatus -->|"否"| FixSyntax["修正語法"]
    FixSyntax --> RetryValidate["重新驗證"]
    RetryValidate --> SyntaxStatus
    CheckCompatibility --> CompatStatus{"相容？"}
    CompatStatus -->|"是"| ConfigSuccess["設定檔驗證 ✅ 通過"]
    CompatStatus -->|"否"| AdaptConfigs["調整設定檔"]
    AdaptConfigs --> RetryCompat["重新檢查"]
    RetryCompat --> CompatStatus
    style Start fill:#4da6ff; style ConfigSuccess fill:#10b981; style SyntaxStatus fill:#f6546a; style CompatStatus fill:#f6546a;
```

#### 實作範例（PowerShell）：
```powershell
# Validate-Configurations 函數範例
function Validate-Configurations {
    $configFiles = @("package.json", "tsconfig.json", "vite.config.js")
    $invalidConfigs = @(); $incompatibleConfigs = @()
    foreach ($configFile in $configFiles) {
        if (Test-Path $configFile) {
            if ($configFile -match "\.json$") { try { Get-Content $configFile -Raw | ConvertFrom-Json | Out-Null } catch { $invalidConfigs += "$configFile (JSON)"; continue } }
            if ($configFile -eq "vite.config.js") { $content = Get-Content $configFile -Raw; if ($content -notmatch "react\(\)") { $incompatibleConfigs += "$configFile (React)" } }
        } else { $invalidConfigs += "$configFile (missing)" }
    }
    if ($invalidConfigs.Count -eq 0 -and $incompatibleConfigs.Count -eq 0) { Write-Output "✅ Configs OK"; return $true } else { Write-Output "❌ Configs FAIL"; return $false }
}
```

### 3️⃣ 環境驗證

```mermaid
# 環境驗證流程圖
graph TD
    Start["環境驗證"] --> CheckEnv["檢查環境"]
    CheckEnv --> VerifyBuildTools["驗證工具"]
    VerifyBuildTools --> ToolsStatus{"可用？"}
    ToolsStatus -->|"是"| CheckPerms["檢查權限"]
    ToolsStatus -->|"否"| InstallTools["安裝工具"]
    InstallTools --> RetryTools["重新驗證"]
    RetryTools --> ToolsStatus
    CheckPerms --> PermsStatus{"足夠？"}
    PermsStatus -->|"是"| EnvSuccess["環境驗證 ✅ 通過"]
    PermsStatus -->|"否"| FixPerms["修正權限"]
    FixPerms --> RetryPerms["重新檢查"]
    RetryPerms --> PermsStatus
    style Start fill:#4da6ff; style EnvSuccess fill:#10b981; style ToolsStatus fill:#f6546a; style PermsStatus fill:#f6546a;
```

#### 實作範例（PowerShell）：
```powershell
# Validate-Environment 函數範例
function Validate-Environment {
    $requiredTools = @(@{Name='git';Cmd='git --version'},@{Name='node';Cmd='node --version'},@{Name='npm';Cmd='npm --version'})
    $missingTools = @(); $permissionIssues = @()
    foreach ($tool in $requiredTools) { try { Invoke-Expression $tool.Cmd | Out-Null } catch { $missingTools += $tool.Name } }
    try { $testFile = ".__perm_test"; New-Item $testFile -ItemType File -Force | Out-Null; Remove-Item $testFile -Force } catch { $permissionIssues += "CWD Write" }
    try { $L = New-Object Net.Sockets.TcpListener([Net.IPAddress]::Loopback, 3000); $L.Start(); $L.Stop() } catch { $permissionIssues += "Port 3000" }
    if ($missingTools.Count -eq 0 -and $permissionIssues.Count -eq 0) { Write-Output "✅ Env OK"; return $true } else { Write-Output "❌ Env FAIL"; return $false }
}
```

### 4️⃣ 最小建構測試

```mermaid
# 最小建構測試流程圖
graph TD
    Start["最小建構測試"] --> CreateTest["建立測試專案"]
    CreateTest --> BuildTest["嘗試建構"]
    BuildTest --> BuildStatus{"成功？"}
    BuildStatus -->|"是"| RunTest["執行基本測試"]
    BuildStatus -->|"否"| FixBuild["修正建構問題"]
    FixBuild --> RetryBuild["重新嘗試建構"]
    RetryBuild --> BuildStatus
    RunTest --> TestStatus{"通過？"}
    TestStatus -->|"是"| TestSuccess["建構測試 ✅ 通過"]
    TestStatus -->|"否"| FixTest["修正測試問題"]
    FixTest --> RetryTest["重新測試"]
    RetryTest --> TestStatus
    style Start fill:#4da6ff; style TestSuccess fill:#10b981; style BuildStatus fill:#f6546a; style TestStatus fill:#f6546a;
```

#### 實作範例（PowerShell）：
```powershell
# Perform-MinimalBuildTest 函數範例
function Perform-MinimalBuildTest {
    $buildSuccess = $false; $testSuccess = $false; $testDir = ".__build_test"
    if (Test-Path $testDir) { Remove-Item $testDir -Recurse -Force }
    try {
        New-Item $testDir -ItemType Directory | Out-Null; Push-Location $testDir
        '{"name": "build-test","scripts": {"build": "echo Build test successful"}}' | Set-Content package.json
        npm run build | Out-Null; $buildSuccess = $true
        'console.log("Test successful");' | Set-Content index.js
        node index.js | Out-Null; $testSuccess = $true
    } catch { Write-Output "❌ Build test exception" } finally { Pop-Location; if (Test-Path $testDir) { Remove-Item $testDir -Recurse -Force } }
    if ($buildSuccess -and $testSuccess) { Write-Output "✅ Build Test OK"; return $true } else { Write-Output "❌ Build Test FAIL"; return $false }
}
```

## 📝 驗證報告格式

### 綜合成功報告：
```
╔═════════════════════ 🔍 QA 驗證報告 ══════════════════════╗
│ 專案： [專案名稱] | 時間戳： [當前日期/時間]               │
├───────────────────────────────────────────────────────────┤
│ 1️⃣ 相依套件：✓ 相容                                       │
│ 2️⃣ 設定檔：✓ 有效且相容                                   │
│ 3️⃣ 環境：✓ 準備就緒                                       │
│ 4️⃣ 最小建構：✓ 成功且通過                                 │
├───────────────────────────────────────────────────────────┤
│ 🚨 最終判定：通過                                         │
│ ➡️ 可進入 BUILD 模式                                      │
╚═══════════════════════════════════════════════════════════╝
```

### 詳細失敗報告：
```
⚠️⚠️⚠️ QA 驗證失敗 ⚠️⚠️⚠️
在進入 BUILD 模式前必須解決以下問題：

1️⃣ 相依性問題：[細節/修正]
2️⃣ 設定檔問題：[細節/修正]
3️⃣ 環境問題：[細節/修正]
4️⃣ 建構測試問題：[細節/修正]

⚠️ BUILD 模式被阻擋。修正後請輸入 'VAN QA' 重新驗證。
```

## 🧪 常見 QA 驗證修正

- **相依套件：** 安裝 Node/npm，執行 `npm install`，檢查版本。
- **設定檔：** 驗證 JSON，檢查必要外掛（如 Vite 需 React），確保 TSConfig 相容。
- **環境：** 檢查權限（管理員/sudo）、確保埠可用、安裝缺少 CLI 工具（git 等）。
- **建構測試：** 檢查日誌錯誤、驗證最小配置、檢查路徑分隔符。

## 🔒 BUILD 模式阻擋機制

進入 BUILD 模式前檢查 QA 狀態的邏輯。

```mermaid
graph TD
    Start["使用者輸入：BUILD"] --> CheckQA{"QA 驗證<br>通過？"}
    CheckQA -->|"是"| AllowBuild["允許進入 BUILD 模式"]
    CheckQA -->|"否"| BlockBuild["阻擋 BUILD 模式"]
    BlockBuild --> Message["顯示：<br>⚠️ 需先完成 QA 驗證"]
    Message --> ReturnToVANQA["提示：請輸入 VAN QA"]
    
    style CheckQA fill:#f6546a; style BlockBuild fill:#ff0000,stroke:#990000; style Message fill:#ff5555; style ReturnToVANQA fill:#4da6ff;
```

### 實作範例（PowerShell）：
```powershell
# Example: Check QA status before allowing BUILD
function Check-QAValidationStatus {
    $qaStatusFile = "memory-bank\.qa_validation_status" # Assumes status is written here
    if (Test-Path $qaStatusFile) {
        if ((Get-Content $qaStatusFile -Raw) -match "PASS") { return $true }
    }
    Write-Output "🚫 BUILD 模式被阻擋：需先完成 QA 驗證。請輸入 'VAN QA' 進行驗證。 🚫"
    return $false
}
```

## 🚨 模式切換觸發（與 QA 相關）

### CREATIVE → VAN QA 切換：
```
⏭️ 下一模式：VAN QA
為驗證技術需求，請輸入 'VAN QA'
```

### VAN QA → BUILD 切換（通過時）：
```
✅ 技術驗證完成
所有前置條件已驗證
可進入 BUILD 模式
輸入 'BUILD' 開始實作
```

## 📋 最終 QA 驗證檢查點

```
✓ 區段檢查點：QA 驗證
- 相依套件驗證通過？ [是/否]
- 設定檔驗證通過？ [是/否]
- 環境驗證通過？ [是/否]
- 最小建構測試通過？ [是/否]

→ 全部為是：可進入 BUILD 模式。
→ 任一為否：修正問題後重新執行 VAN QA。
```

**通過時下一步：** 觸發 BUILD 模式。
**失敗時下一步：** 修正問題並重新執行 `VAN QA`。